to create a function, use the "fn" keyword

functions can be defined outside the main() function, that is in the global scope (kind of like constants).
    - functions defined outside of main() can still be called from within main().

    - when defining functions that utilize parameters, you must type annotate each one.
        - code
           1| fn f(x: i32, y: i32, z: i32) {
           2|     let sum = x + y + z;
           3|     println!("x + y + z = {sum}");
           4| }
           5| fn main() {
           6|     f(1, 3, 5);
           7| }

~Statements~ are instructions that perform some action and do not return a value.
    - the key characteristic of a statement is that it doesn't produce a value that can be used in another expression.
    - code
       1| fn main() {
       2|     let y = 27; // this line is a statement; it doesn't return a value, just states that y is equal to 27
       3| } // function defintions are statements themselves

~Expressions~ evaluate to a resultant value. That is, they return a value.
    - expressions can be part of statements
    - Expressions don't include ending semicolons.
        ~ Adding a semicolon to the end of an expression turns it into a statement and it won't return a value; instead,
          it becomes a () (unit type).
    - examples of expressions include calling a function, calling a macro, or a new scope block between curly braces.
    - code
       1| fn main() {
       2|     let y = {       \
       3|         let x = 3;   |  the code block assigned to variable y is an expression b/c
       4|         x + 1        |  it returns a value, which is 4 in this case.
       5|     };              /
       6|
       7|     println!("The value of y is: {y}");
       8| }

Functions with return values
    - most functions return the last expression implicitly (w/out ;).
    - to have a function w/ a return value, we must declare the returned value's type using "-> {type}"
    - code
       1|   fn five() -> i32 { // notice "-> i32", this line declares the output type. 
       2|       5 // this line implicitly reutrns 5. in python this would be "return 5". 
       3|   }
       4|    
       5|   fn main() {
       6|       let x = five(); // assigns 5 to x because five() yields 5.
       7|       
       8|       println!("The value of x is: {x}");
       9|   }    
       
       1|   fn main() {
       2|       let x = plus_one(5); // calls plus_one with 5 as an argument
       3|
       4|       println!("The value of x is: {x}");
       5|   }
       6|
       7|   fn plus_one(x: i32) -> i32 { // defines parameter and it's type, and what the output's type will be
       8|       x + 1 // if ; added to line end, then this code would produce a "mismatched types" error
       9|   }
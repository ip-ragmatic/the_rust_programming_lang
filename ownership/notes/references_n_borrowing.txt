References are Non-Owning Pointers:
    - references are a type of pointer that doesn't have ownership. meaning, a pointer can be assigned to it without 
      causing the original variable to lose ownership. syntax is &x where x is variable name.
         1| fn main() {
         2|     let m1 = String::from("Hello");
         3|     let m2 = String::from("world");   // L1
         4|     greet(&m1, &m2);                  // L3. note the &. &m1 &m2 parameters are "borrowing" m1 and m2 
         5|     let s = format!("{} {}", m1, m2);
         6| }
         7| 
         8| fn greet(g1: &String, g2: &String) {  // L2. note the &. g1 and g2 expecting a reference to a string
         9|     println!("{} {}!", g1, g2);
        10| }
        ~ b/c g1 doesn't own m1 or "Hello", no heap data has is deallocated upon greet(&m1, &m2) returning. That stack frame
          frame greet gets popped from the call stack. 
            * This fact is consistent with our Box Deallocation Principle. Because g1 did not own "Hello", Rust did not 
              deallocate "Hello" on behalf of g1.
    - References don't own the data they point to.
    - References live on the call stack.

Dereferencing a Pointer Accesses its Data:
    - the Dereference Operator (written w/ an *) is the underlying mechanism that allows println! to work w/ owned and 
      "borrowed" strings (String and &String).
          1| fn main() {
          2|     let mut x: Box<i32> = Box::new(1);
          3|     let a: i32 = *x;         // *x reads the heap value, so a = 1
          4|     *x += 1;                 // *x on the left-side modifies the heap value,
          5|                              //     so x points to the value 2
          6|     
          7|     let r1: &Box<i32> = &x;  // r1 points to x on the stack
          8|     let b: i32 = **r1;       // two dereferences get us to the heap value
          9|     
         10|     let r2: &i32 = &*x;     // r2 points to the heap value directly
         11|     let c: i32 = *r2;       // so only one dereference is needed to read it
         12| }

Rust Avoids Simultaneous Aliasing and Mutation:
    - Aliasing is accessing the same data through different variables.
        ~ On its own, aliasing is harmless. But combined with mutation, we have a recipe for disaster. One variable can 
          "pull the rug out" from another variable in many ways.
    - Pointer Safety Principle: data should never be aliased and mutated at the same time.
        ~ However, because references are non-owning pointers, they need different rules than boxes to ensure the 
          Pointer Safety Principle. By design, references are meant to temporarily create aliases.

References Change Permissions on Paths:
    - core idea behind the borrow checker is that variables have three kinds of permissions on their data:
        1. Read (R): data can be copied to another location.
        2. Write (W): data can be mutated in-place.
        3. Own (O): data can be moved or dropped.
    - Paths are anything that can put on the left-hand side of an assignment. Paths include:
        ~ Variables, like a.
        ~ Dereferences of paths, like *a.
        ~ Array accesses of paths, like a[0].
        ~ Fields of paths, like a.0 for tuples or a.field for structs (discussed next chapter).
        ~ Any combination of the above, like *((*a)[0].1).
    - By default, a variable has read/own permissions (RO) on its data. If a variable is annotated with 'let mut', then it also 
      has the write permission (W). The key idea is that references can temporarily remove these permissions.
        1| fn main() {
        2|   let mut v: Vec<i32> = vec![1, 2, 3];               // v: +R +W +O
        3|   let num: &i32 = &v[2];                             // v: R -W -O, num: +R +O, *num: +R
        4|   println!("Third element is {}", *num);
        5|   println!("Again, the third element is {}", *num);  // v: R +W +O, num: -R -O, *num: -R
        6|   v.push(4);                                         // v: -R -W -O
        7| }
        ~ borrow checker makes it so 'v' doesn't own head array and can't be mutated while 'num' is in use (and '*num'). but after
          'num' is done being used, it loses it's permissions and R and O are given back to 'v'. after line 6 executes, main()
          returns and 'v' loses its permissions.
        ~ permissions are dropped for certain heap allocations like 'vec!' or 'String::from(<string>)' when the variable they're
          assigned to goes out of scope.
    - Creating a reference to data ("borrowing" it) causes that data to be temporarily read-only until the reference 
      is no longer used.

The Borrow Checker Finds Permission Violations:
    - back to the borrow checker, the borrow checker looks for potentially unsafe operations involving references.

Mutable References Provide Unique and Non-Owning Access to Data:
    - Immutable references (aka Shared References) permit aliasing but disallow mutation.
    - Mutable references (aka Unique References) temporarily provide mutable access to data without moving it.
    - A mutable reference is created with the '&mut' operator.  
        1| fn main() {
        2|     let mut v: Vec<i32> = vec![1, 2, 3];   // v: +R +W +O
        3|     let num: &mut i32 = &mut v[2];         // num: +R +O, *num: +R +w
        4|     *num += 1;
        5|     println!("Third element is {}", *num); // v: +R +W +O, num, *num
        6|     println!("Vector is now {:?}", v);     // v
        7| }
        ~ When num was an immutable reference, v still had the R permission. Now that num is a mutable reference, v has lost 
          all permissions while num is in use.
        ~ When num was an immutable reference, the path *num only had the R permission. Now that num is a mutable reference, 
          *num has also gained the W permission.
            * num refers to the mutable reference itself, e.g. num cannot be reassigned to a different mutable reference.
    - Mutable references can also be temporarily "downgraded" to read-only references. For example:
        1| fn main() {
        2|     let mut v: Vec<i32> = vec![1, 2, 3];
        3|     let num: &mut i32 = &mut v[2];       // *num: +R +W
        4|     let num2: &i32 = &*num;              // *num: R. *num2: +R
        5|     println!("{} {}", *num, *num2);
        6| }
        ~ In this program, the borrow '&*num' removes the W permission from '*num' but not the R permission, so 'println!(..)'
          can read both '*num' and '*num2'.

Permissions Are Returned At The End of a Reference's Lifetime:
    - lifetime refers to the range of code spanning from its birth (where the reference is created) 
      to its death (the last time(s) the reference is used).

Data Must Outlive All Of Its References:
    - the borrow checker enforces that data must outlive any references to it. Rust enforces this property in two ways:
        1. input/output references are treated differently than references within a function body
        2. Rust uses the F ("flow") permission, to check the safety of those references.
    - useful:
        ~ a reference to the container 'v' (like '&v' where 'v' is a vector) is not actually invalidated by mutating 'v'.

Summary:
    - References provide the ability to read and write data without consuming ownership of it. References are created with 
      borrows (& and &mut) and used with dereferences (*), often implicitly.
    - References can be easily misused. Rust's borrow checker enforces a system of permissions that ensures references are 
      used safely:
        ~ All variables can read, own, and (optionally) write their data.
        ~ Creating a reference will transfer permissions from the borrowed path to the reference.
        ~ Permissions are returned once the reference's lifetime has ended.
        ~ Data must outlive all references that point to it.